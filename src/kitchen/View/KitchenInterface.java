/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kitchen.View;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import kitchen.Controller.Socket;
import kitchen.Model.Order;
import kitchen.Model.OrderStatus;

/**
 *
 * @author Ramen
 */
public class KitchenInterface extends javax.swing.JFrame {
    private static Order order;
    private KitchenInterface kI;
    Socket client;
    Socket socket;
    
    /**
     * Creates new form NewJFrame
     */
    public KitchenInterface() {
        this.order = new Order(2,"MO: MO:",3,OrderStatus.UNCOOKED,200);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OrderPane = new javax.swing.JScrollPane();
        OrderInTable = new javax.swing.JTable();
        UnCookedButton = new javax.swing.JToggleButton();
        CookingButton = new javax.swing.JToggleButton();
        CookedButton = new javax.swing.JToggleButton();
        TopText = new javax.swing.JLabel();
        DeliveryPane = new javax.swing.JScrollPane();
        DeliveryTable = new javax.swing.JTable();
        BottomText = new javax.swing.JLabel();
        DeliveredButton = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OrderInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Table", "Dish", "Quantity", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrderPane.setViewportView(OrderInTable);

        UnCookedButton.setText("UnCooked");
        UnCookedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnCookedButtonActionPerformed(evt);
            }
        });

        CookingButton.setText("Cooking");
        CookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CookingButtonActionPerformed(evt);
            }
        });

        CookedButton.setText("Cooked");
        CookedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CookedButtonActionPerformed(evt);
            }
        });

        TopText.setText("ORDERS IN! :::");

        DeliveryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Table Number", "Dish", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        DeliveryPane.setViewportView(DeliveryTable);

        BottomText.setText("DELIVERIES :::");

        DeliveredButton.setText("Delivered");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BottomText)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DeliveryPane, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                                .addComponent(TopText)
                                .addComponent(OrderPane))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(374, 374, 374)
                        .addComponent(DeliveredButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UnCookedButton)
                        .addGap(206, 206, 206)
                        .addComponent(CookingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(CookedButton)
                        .addGap(84, 84, 84))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(TopText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(OrderPane, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UnCookedButton)
                    .addComponent(CookingButton)
                    .addComponent(CookedButton))
                .addGap(11, 11, 11)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BottomText)
                .addGap(18, 18, 18)
                .addComponent(DeliveryPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(DeliveredButton)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UnCookedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnCookedButtonActionPerformed
        // TODO add your handling code here:
        
        
           DefaultTableModel model = (DefaultTableModel) OrderInTable.getModel();
           model.addRow(new Object[]{order.getTableNo(),order.getDishName(),order.getQuantity(),order.getStatus()});
//        
//        try{
//                client = new Socket(this);
//                clientThread = new Thread(client);
//                clientThread.start();
//                client.send(new Message("test", "testUser", "testContent", "SERVER"));
//            }
//            catch(Exception ex){
//                jTextArea1.append("[Application > Me] : Server not found\n");
//            }
       
    }//GEN-LAST:event_UnCookedButtonActionPerformed

    private void CookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CookingButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CookingButtonActionPerformed

    private void CookedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CookedButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CookedButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BottomText;
    private javax.swing.JToggleButton CookedButton;
    private javax.swing.JToggleButton CookingButton;
    private javax.swing.JButton DeliveredButton;
    private javax.swing.JScrollPane DeliveryPane;
    private javax.swing.JTable DeliveryTable;
    private javax.swing.JTable OrderInTable;
    private javax.swing.JScrollPane OrderPane;
    private javax.swing.JLabel TopText;
    private javax.swing.JToggleButton UnCookedButton;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

 
   
//    private final ArrayList<Order> orderList= new ArrayList<>();
    
    /**
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KitchenInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KitchenInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KitchenInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KitchenInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */ 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KitchenInterface().setVisible(true);
                
            }
        });
    }
    
   
}

